import requests
import openpyxl
import tldextract
import time
import concurrent.futures
from concurrent.futures import ThreadPoolExecutor


# Constants
API_KEY = 'dnsdb-api'
BASE_URL = 'https://api.dnsdb.info/dnsdb/v2/regex/rrnames/'
HEADERS = {
    'X-API-KEY': API_KEY,
    'Accept': 'application/x-ndjson'
}
LIMIT = 1000000
SWCLIENT = 'dangling_dns_finder'
VERSION = '0.1'
MAX_WORKERS = 10  # Number of concurrent agents

# Days to Unix timestamp conversion
DAYS = 90  # Replace with the number of days you want
TIME_LAST_AFTER = int(time.time()) - (DAYS * 24 * 60 * 60)

# Function to fetch DNS records
def fetch_dns_records(term, offset, time_last_after=None, limit=50000):
    url = f"{BASE_URL}^.*\\.*{term}*\\.[^.]*\\..*$/ANY?limit={limit}&offset={offset}&swclient={SWCLIENT}&version={VERSION}"
    if time_last_after:
        url += f"&time_last_after={time_last_after}"
    
    response = requests.get(url, headers=HEADERS)
    lines = response.text.strip().split("\n")
    return [eval(line)["obj"]["rrname"] for line in lines if "obj" in eval(line)]

# Function to manage concurrent fetching
def concurrent_fetch(term, time_last_after=None):
    all_records = []
    with ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
        future_to_offset = {executor.submit(fetch_dns_records, term, offset, time_last_after): offset for offset in range(0, LIMIT, 5000)}
        for future in concurrent.futures.as_completed(future_to_offset):
            all_records.extend(future.result())
    return all_records

# Variables
term = 'verizon'  # Replace with your term

# Function to filter out apex domains
def filter_apex_domains(records):
    filtered_records = []
    for record in records:
        extracted = tldextract.extract(record)
        if term not in extracted.domain:
            filtered_records.append(record)
    return filtered_records

# Fetch DNS records
all_time_records = concurrent_fetch(term)
last_3_months_records = concurrent_fetch(term, TIME_LAST_AFTER)

# Filter out domains
all_time_records = filter_apex_domains(all_time_records)
last_3_months_records = filter_apex_domains(last_3_months_records)

# Find dangling records
dangling_records = set(all_time_records) - set(last_3_months_records)

# Create Excel workbook
wb = openpyxl.Workbook()

# All Time Records Sheet
ws1 = wb.active
ws1.title = "All Time Records"
for idx, record in enumerate(all_time_records, 1):
    ws1.cell(row=idx, column=1, value=record)

# Last 3 Months Records Sheet
ws2 = wb.create_sheet(title="Last 3 Months Records")
for idx, record in enumerate(last_3_months_records, 1):
    ws2.cell(row=idx, column=1, value=record)

# Dangling Records Sheet
ws3 = wb.create_sheet(title="Dangling Records")
for idx, record in enumerate(dangling_records, 1):
    ws3.cell(row=idx, column=1, value=record)

# Save Workbook
wb.save("dns_records.xlsx")

print("Excel workbook has been created.")
